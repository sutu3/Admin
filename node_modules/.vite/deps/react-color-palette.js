"use client";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/react-color-palette/dist/rcp.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_react3 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_react7 = __toESM(require_react(), 1);
var import_react8 = __toESM(require_react(), 1);
function v(t, e) {
  return Array.isArray(t) ? t.includes(e) : t;
}
function b() {
  let t = (0, import_react3.useRef)(null), [e, r] = (0, import_react3.useState)(0), o = (0, import_react3.useCallback)(() => r((i) => i + 1), []);
  (0, import_react3.useLayoutEffect)(() => {
    window.addEventListener("resize", o, false);
    let i = new ResizeObserver(o);
    return t.current && i.observe(t.current), () => {
      window.removeEventListener("resize", o, false), i.disconnect();
    };
  }, [o]);
  let n = (0, import_react3.useMemo)(() => {
    var _a;
    let { width: i = 1, height: c = 1 } = ((_a = t.current) == null ? void 0 : _a.getBoundingClientRect()) ?? {};
    return { width: i, height: c };
  }, [e]), s = (0, import_react3.useCallback)(() => {
    var _a;
    let { left: i = 1, right: c = 1, top: a = 1, bottom: l = 1 } = ((_a = t.current) == null ? void 0 : _a.getBoundingClientRect()) ?? {};
    return { left: i, right: c, top: a, bottom: l };
  }, []);
  return [t, n, s];
}
function C(t, e, r) {
  return t < e ? e : t > r ? r : t;
}
var I = class {
  convert(e, r) {
    let o = this.toHex("#000000"), n = this.hex2rgb(o), s = this.rgb2hsv(n);
    if (e === "hex") {
      let i = r;
      o = this.toHex(i), n = this.hex2rgb(o), o.startsWith("rgba") && (n = this.toRgb(o), o = this.rgb2hex(n)), s = this.rgb2hsv(n);
    } else e === "rgb" ? (n = r, o = this.rgb2hex(n), s = this.rgb2hsv(n)) : e === "hsv" && (s = r, n = this.hsv2rgb(s), o = this.rgb2hex(n));
    return { hex: o, rgb: n, hsv: s };
  }
  toHex(e) {
    if (e.startsWith("#")) {
      if (e.length === 4 || e.length === 5) return e = e.split("").map((r, o) => o ? o < 4 ? r + r : r === "f" ? void 0 : r + r : "#").join(""), e;
      if (e.length === 7) return e;
      if (e.length === 9) return e.endsWith("ff") ? e.slice(0, 7) : e;
    } else {
      let r = document.createElement("canvas").getContext("2d");
      if (!r) throw new Error("2d context not supported or canvas already initialized");
      return r.fillStyle = e, r.fillStyle;
    }
    return "#000000";
  }
  toRgb(e) {
    let r = e.match(/\d+(\.\d+)?/gu) ?? [], [o, n, s, i] = Array.from({ length: 4 }).map((c, a) => C(+(r[a] ?? (a < 3 ? 0 : 1)), 0, a < 3 ? 255 : 1));
    return { r: o, g: n, b: s, a: i };
  }
  toHsv(e) {
    let r = e.match(/\d+(\.\d+)?/gu) ?? [], [o, n, s, i] = Array.from({ length: 4 }).map((c, a) => C(+(r[a] ?? (a < 3 ? 0 : 1)), 0, a ? a < 3 ? 100 : 1 : 360));
    return { h: o, s: n, v: s, a: i };
  }
  hex2rgb(e) {
    e = e.slice(1);
    let [r, o, n, s] = Array.from({ length: 4 }).map((i, c) => parseInt(e.slice(c * 2, c * 2 + 2), 16));
    return s = Number.isNaN(s) ? 1 : s / 255, { r, g: o, b: n, a: s };
  }
  rgb2hsv({ r: e, g: r, b: o, a: n }) {
    e /= 255, r /= 255, o /= 255;
    let s = Math.max(e, r, o), i = s - Math.min(e, r, o), c = i ? (s === e ? (r - o) / i + (r < o ? 6 : 0) : s === r ? 2 + (o - e) / i : 4 + (e - r) / i) * 60 : 0, a = s ? i / s * 100 : 0, l = s * 100;
    return { h: c, s: a, v: l, a: n };
  }
  hsv2rgb({ h: e, s: r, v: o, a: n }) {
    r /= 100, o /= 100;
    let s = ~~(e / 60), i = e / 60 - s, c = o * (1 - r), a = o * (1 - r * i), l = o * (1 - r * (1 - i)), u = s % 6, p = [o, a, c, c, l, o][u] * 255, d = [l, o, o, a, c, c][u] * 255, g = [c, c, l, o, o, a][u] * 255;
    return { r: p, g: d, b: g, a: n };
  }
  rgb2hex({ r: e, g: r, b: o, a: n }) {
    let [s, i, c, a] = [e, r, o, n].map((l, u) => Math.round(u < 3 ? l : l * 255).toString(16).padStart(2, "0"));
    return ["#", s, i, c, a === "ff" ? void 0 : a].join("");
  }
};
var m = new I();
var x = (0, import_react4.memo)(({ onCoordinateChange: t, children: e }) => {
  let [r, { width: o, height: n }, s] = b(), i = (0, import_react4.useCallback)((a, l = false) => {
    let { left: u, top: p } = s(), d = C(a.clientX - u, 0, o), g = C(a.clientY - p, 0, n);
    t(l, d, g);
  }, [o, n, s, t]), c = (0, import_react4.useCallback)((a) => {
    if (a.button !== 0) return;
    i(a);
    let l = (p) => {
      i(p);
    }, u = (p) => {
      i(p, true), document.removeEventListener("pointermove", l, false), document.removeEventListener("pointerup", u, false);
    };
    document.addEventListener("pointermove", l, false), document.addEventListener("pointerup", u, false);
  }, [i]);
  return import_react4.default.createElement("div", { ref: r, className: "rcp-interactive", onPointerDown: c }, e);
});
var M = (0, import_react2.memo)(({ color: t, onChange: e, onChangeComplete: r }) => {
  let [o, { width: n }] = b(), s = (0, import_react2.useMemo)(() => ({ x: t.hsv.a * n }), [t.hsv.a, n]), i = (0, import_react2.useCallback)((l, u) => {
    let p = m.convert("hsv", { ...t.hsv, a: u / n });
    e(p), l && (r == null ? void 0 : r(p));
  }, [t.hsv, n, e, r]), c = (0, import_react2.useMemo)(() => [t.rgb.r, t.rgb.g, t.rgb.b].join(" "), [t.rgb.r, t.rgb.g, t.rgb.b]), a = (0, import_react2.useMemo)(() => [c, t.rgb.a].join(" / "), [c, t.rgb.a]);
  return import_react2.default.createElement(x, { onCoordinateChange: i }, import_react2.default.createElement("div", { ref: o, style: { background: `linear-gradient(to right, rgb(${c} / 0), rgb(${c} / 1)) top left / auto auto,
                      conic-gradient(#666 0.25turn, #999 0.25turn 0.5turn, #666 0.5turn 0.75turn, #999 0.75turn) top left / 12px 12px
                      repeat` }, className: "rcp-alpha" }, import_react2.default.createElement("div", { style: { left: s.x, background: `linear-gradient(to right, rgb(${a}), rgb(${a})) top left / auto auto,
                        conic-gradient(#666 0.25turn, #999 0.25turn 0.5turn, #666 0.5turn 0.75turn, #999 0.75turn) ${-s.x - 4}px 2px / 12px 12px
                        repeat` }, className: "rcp-alpha-cursor" })));
});
function E(t, e) {
  return Math.round(t * 10 ** e) / 10 ** e;
}
function P({ r: t, g: e, b: r, a: o }) {
  let n = [Math.round(t), Math.round(e), Math.round(r)], s = E(o, 3);
  return s < 1 && n.push(s), n.join(", ");
}
function N({ h: t, s: e, v: r, a: o }) {
  let n = [`${Math.round(t)}Â°`, `${Math.round(e)}%`, `${Math.round(r)}%`], s = E(o, 3);
  return s < 1 && n.push(s), n.join(", ");
}
var D = (0, import_react5.memo)(({ hideInput: t, color: e, onChange: r, onChangeComplete: o }) => {
  let [n, s] = (0, import_react5.useState)({ hex: { value: e.hex, inputted: false }, rgb: { value: P(e.rgb), inputted: false }, hsv: { value: N(e.hsv), inputted: false } });
  (0, import_react5.useEffect)(() => {
    n.hex.inputted || s((l) => ({ ...l, hex: { ...l.hex, value: e.hex } }));
  }, [n.hex.inputted, e.hex]), (0, import_react5.useEffect)(() => {
    n.rgb.inputted || s((l) => ({ ...l, rgb: { ...l.rgb, value: P(e.rgb) } }));
  }, [n.rgb.inputted, e.rgb]), (0, import_react5.useEffect)(() => {
    n.hsv.inputted || s((l) => ({ ...l, hsv: { ...l.hsv, value: N(e.hsv) } }));
  }, [n.hsv.inputted, e.hsv]);
  let i = (0, import_react5.useCallback)((l) => (u) => {
    let { value: p } = u.target;
    s((d) => ({ ...d, [l]: { ...d[l], value: p } })), r(l === "hsv" ? m.convert("hsv", m.toHsv(p)) : l === "rgb" ? m.convert("rgb", m.toRgb(p)) : m.convert("hex", p));
  }, [r]), c = (0, import_react5.useCallback)((l) => () => {
    s((u) => ({ ...u, [l]: { ...u[l], inputted: true } }));
  }, []), a = (0, import_react5.useCallback)((l) => (u) => {
    let { value: p } = u.target;
    s((d) => ({ ...d, [l]: { ...d[l], inputted: false } })), o == null ? void 0 : o(l === "hsv" ? m.convert("hsv", m.toHsv(p)) : l === "rgb" ? m.convert("rgb", m.toRgb(p)) : m.convert("hex", p));
  }, [o]);
  return import_react5.default.createElement("div", { className: "rcp-fields" }, !v(t, "hex") && import_react5.default.createElement("div", { className: "rcp-fields-floor" }, import_react5.default.createElement("div", { className: "rcp-field" }, import_react5.default.createElement("input", { id: "hex", className: "rcp-field-input", value: n.hex.value, onChange: i("hex"), onFocus: c("hex"), onBlur: a("hex") }), import_react5.default.createElement("label", { htmlFor: "hex", className: "rcp-field-label" }, "HEX"))), (!v(t, "rgb") || !v(t, "hsv")) && import_react5.default.createElement("div", { className: "rcp-fields-floor" }, !v(t, "rgb") && import_react5.default.createElement("div", { className: "rcp-field" }, import_react5.default.createElement("input", { id: "rgb", className: "rcp-field-input", value: n.rgb.value, onChange: i("rgb"), onFocus: c("rgb"), onBlur: a("rgb") }), import_react5.default.createElement("label", { htmlFor: "rgb", className: "rcp-field-label" }, "RGB")), !v(t, "hsv") && import_react5.default.createElement("div", { className: "rcp-field" }, import_react5.default.createElement("input", { id: "hsv", className: "rcp-field-input", value: n.hsv.value, onChange: i("hsv"), onFocus: c("hsv"), onBlur: a("hsv") }), import_react5.default.createElement("label", { htmlFor: "hsv", className: "rcp-field-label" }, "HSV"))));
});
var w = (0, import_react6.memo)(({ color: t, onChange: e, onChangeComplete: r }) => {
  let [o, { width: n }] = b(), s = (0, import_react6.useMemo)(() => ({ x: t.hsv.h / 360 * n }), [t.hsv.h, n]), i = (0, import_react6.useCallback)((a, l) => {
    let u = m.convert("hsv", { ...t.hsv, h: l / n * 360 });
    e(u), a && (r == null ? void 0 : r(u));
  }, [t.hsv, n, e, r]), c = (0, import_react6.useMemo)(() => [t.hsv.h, "100%", "50%"].join(" "), [t.hsv.h]);
  return import_react6.default.createElement(x, { onCoordinateChange: i }, import_react6.default.createElement("div", { ref: o, className: "rcp-hue" }, import_react6.default.createElement("div", { style: { left: s.x, backgroundColor: `hsl(${c})` }, className: "rcp-hue-cursor" })));
});
var A = (0, import_react7.memo)(({ height: t, color: e, onChange: r, onChangeComplete: o }) => {
  let [n, { width: s }] = b(), i = (0, import_react7.useMemo)(() => {
    let u = e.hsv.s / 100 * s, p = (100 - e.hsv.v) / 100 * t;
    return { x: u, y: p };
  }, [e.hsv.s, e.hsv.v, s, t]), c = (0, import_react7.useCallback)((u, p, d) => {
    let g = m.convert("hsv", { ...e.hsv, s: p / s * 100, v: 100 - d / t * 100 });
    r(g), u && (o == null ? void 0 : o(g));
  }, [e.hsv, s, t, r, o]), a = (0, import_react7.useMemo)(() => [e.hsv.h, "100%", "50%"].join(" "), [e.hsv.h]), l = (0, import_react7.useMemo)(() => [e.rgb.r, e.rgb.g, e.rgb.b].join(" "), [e.rgb.r, e.rgb.g, e.rgb.b]);
  return import_react7.default.createElement(x, { onCoordinateChange: c }, import_react7.default.createElement("div", { ref: n, style: { height: t, backgroundColor: `hsl(${a})` }, className: "rcp-saturation" }, import_react7.default.createElement("div", { style: { left: i.x, top: i.y, backgroundColor: `rgb(${l})` }, className: "rcp-saturation-cursor" })));
});
var ee = (0, import_react.memo)(({ height: t = 200, hideAlpha: e = false, hideInput: r = false, color: o, onChange: n, onChangeComplete: s }) => import_react.default.createElement("div", { className: "rcp-root rcp" }, import_react.default.createElement(A, { height: t, color: o, onChange: n, onChangeComplete: s }), import_react.default.createElement("div", { className: "rcp-body" }, import_react.default.createElement("section", { className: "rcp-section" }, import_react.default.createElement(w, { color: o, onChange: n, onChangeComplete: s }), !e && import_react.default.createElement(M, { color: o, onChange: n, onChangeComplete: s })), (!v(r, "hex") || !v(r, "rgb") || !v(r, "hsv")) && import_react.default.createElement("section", { className: "rcp-section" }, import_react.default.createElement(D, { hideInput: r, color: o, onChange: n, onChangeComplete: s })))));
function te(t) {
  let [e, r] = (0, import_react8.useState)(m.convert("hex", t));
  return (0, import_react8.useEffect)(() => {
    r(m.convert("hex", t));
  }, [t]), [e, r];
}
export {
  M as Alpha,
  ee as ColorPicker,
  m as ColorService,
  w as Hue,
  A as Saturation,
  te as useColor
};
//# sourceMappingURL=react-color-palette.js.map
